/**
 * Returns snapped ids at cluster coords.
 *
 * ### Example (ts module)
 * ```ts
 * import { snap } from 'snap-to-grid-clustering';
 * snap([[-1, 1], [2, 3], [10, 10], [11, 11]], 5)
 * // => { '0,0': [ 0 ], '0,1': [ 1 ], '2,2': [ 2, 3 ] }
 * ```
 *
 * ### Example (es module)
 * ```js
 * import { snap } from 'snap-to-grid-clustering'
 * console.log(snap([[-1, 1], [2, 3], [10, 10], [11, 11]], 5))
 * // => { '0,0': [ 0 ], '0,1': [ 1 ], '2,2': [ 2, 3 ] }
 * ```
 *
 * ### Example (commonjs)
 * ```js
 * var snap = require('snap-to-grid-clustering').snap;
 * console.log(snap([[-1, 1], [2, 3], [10, 10], [11, 11]], 5))
 * // => { '0,0': [ 0 ], '0,1': [ 1 ], '2,2': [ 2, 3 ] }
 * ```
 */
export function snap(coords, gridSize) {
    return coords.reduce((snappedCoordsPart, coord, coordIndex) => {
        const key = coord
            .reduce((keyPart, axle) => {
            return `${keyPart},${Math.round(+axle / gridSize)}`;
        }, '')
            .substr(1);
        return {
            ...snappedCoordsPart,
            [key]: snappedCoordsPart[key]
                ? [...snappedCoordsPart[key], coordIndex]
                : [coordIndex]
        };
    }, {});
}
/**
 * Returns snapped ids as list.
 *
 * ### Example (ts module)
 * ```ts
 * import { snapList } from 'snap-to-grid-clustering';
 * snapList([[-1, 1], [2, 3], [10, 10], [11, 11]], 5)
 * // => [[0], [1], [2, 3]]
 * ```
 *
 * ### Example (es module)
 * ```js
 * import { snapList } from 'snap-to-grid-clustering'
 * console.log(snapList([[-1, 1], [2, 3], [10, 10], [11, 11]], 5))
 * // => [[0], [1], [2, 3]]
 * ```
 *
 * ### Example (commonjs)
 * ```js
 * var snapList = require('snap-to-grid-clustering').snapList;
 * console.log(snapList([[-1, 1], [2, 3], [10, 10], [11, 11]], 5))
 * // => [[0], [1], [2, 3]]
 * ```
 */
export function snapList(coords, gridSize) {
    return Object.values(snap(coords, gridSize));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RnYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvc3RnYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F1Qkc7QUFDSCxNQUFNLFVBQVUsSUFBSSxDQUFDLE1BQWMsRUFBRSxRQUFnQjtJQUNuRCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQ2xCLENBQUMsaUJBQWdDLEVBQUUsS0FBWSxFQUFFLFVBQWtCLEVBQUUsRUFBRTtRQUNyRSxNQUFNLEdBQUcsR0FBVyxLQUFLO2FBQ3RCLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsRUFBRTtZQUN4QixPQUFPLEdBQUcsT0FBTyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLEVBQUUsQ0FBQztRQUN0RCxDQUFDLEVBQUUsRUFBRSxDQUFDO2FBQ0wsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsT0FBTztZQUNMLEdBQUcsaUJBQWlCO1lBQ3BCLENBQUMsR0FBRyxDQUFDLEVBQUUsaUJBQWlCLENBQUMsR0FBRyxDQUFDO2dCQUMzQixDQUFDLENBQUMsQ0FBQyxHQUFHLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxFQUFFLFVBQVUsQ0FBQztnQkFDekMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDO1NBQ2pCLENBQUM7SUFDSixDQUFDLEVBQ0QsRUFBRSxDQUNILENBQUM7QUFDSixDQUFDO0FBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBdUJHO0FBQ0gsTUFBTSxVQUFVLFFBQVEsQ0FBQyxNQUFjLEVBQUUsUUFBZ0I7SUFDdkQsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUMvQyxDQUFDIn0=